Problem 3.2
We are writing a simple searchable dictionary using modular programming. First, the program
reads a file containing words and their definitions into an easily searchable data structure. Then,
the user can type a word, and the program will search the dictionary, and assuming the word is
found, outputs the definition. The program proceeds until the user chooses to quit.
We split the code into several files: main.c, dict.c, and dict.h. The contents of these files are
described briefly below.
1
main.c
#include <stdio.h>
#include <stdlib.h>
#include "dict.h"

int main(){

...
}

dict.c
#include "dict.h"
/*data structure for dictionary */

char *the_dictionary[1000];

void load_dictionary()
{

...
}
char *lookup(char[]){
...
}

dict.h
#include "dict.h"
/*data structure for dictionary */

char *the dictionary[1000];
void load_dictionary();
char *lookup(char[]);




Answer the following questions based on the above program structure.
(a) In implementing this program, you want to access the global variable the_dictionary from
main.c, as well as from dict.c. However, due to the header file’s inclusion in both source
documents, the variable gets declared in both places, creating an ambiguity. How would you
resolve this ambiguity?


solution:
to solve the ambiguity ,declare the global variable with extern keyword.
-> extern the_dictionary


(b) Now, suppose you want to restrict the dictionary data structure to be accessible only from
functions in dict.c. You remove the declaration from dict.h. Is it still possible to directly
access or modify the variable from main.c, even without the declaration in dict.h? If so,
how would you ensure the data structure variable remains private?


solution:
To make the variable remain private,it is declared with static keyword in the dict.c file,that makes it only accesible in that file only.
-> static the_dictionary[1000]


(c) Congratulations! You’re done and ready to compile your code. Write the command line
that you should use to compile this code (using gcc). Let’s call the desired output program
dictionary.o.


solution:
using the following commands :gcc -g -O0 -Wall main.c dict.c -o dictionary.o


